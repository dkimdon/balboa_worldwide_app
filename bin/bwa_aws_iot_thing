#!/usr/bin/env ruby

require 'aws-sdk-iotdataplane'
require 'bwa/client'
require 'bwa/discovery'
require 'json'

SAVED_SHADOW = '/home/dkimdon/balboa_worldwide_app/shadow.json'
reported = {}
desired = {}

def get_reported(spa, previous_reported)
  # Get current state from spa
  message = spa.poll
  reported = {}

  # XXX - The spa reports a temperature for some amount of time after it has
  # been set to rest mode.  At some point after the spa is set to rest mode
  # (days?  hours?) the spa reports a null value for the temperature.

  # - How long will it report the temperature while in rest mode?

  # - How accurate is the temperature reading while it is in rest mode?

  # - Would it be better to ignore temperature readings when the spa is in
  # rest mode?

  if message.current_temperature
    reported['temperature'] = message.current_temperature.to_i
    reported['temperature_timestamp'] = Time.now.to_i
  else
    # The spa is not currently reporting a temperature, continue to
    # report the old temperature.
    reported['temperature'] = previous_reported['temperature']
    reported['temperature_timestamp'] = previous_reported['temperature_timestamp']
  end


  if message.temperature_range == :low
    reported['temperature_range'] = "low"
  elsif message.temperature_range == :high
    reported['temperature_range'] = "high"
  end

  if message.heating_mode == :ready
    reported['heating_mode'] = "ready"
  elsif message.heating_mode == :rest
    reported['heating_mode'] = "rest"
  end

  reported['set_temperature'] = message.set_temperature.to_i

  return reported
end

def spa_control(spa, aws, thing_name)

  # Get current shadow from AWS
  # TODO - catch exception if there is no shadow
  resp = aws.get_thing_shadow({
    thing_name: thing_name
  })
  current_shadow = JSON.parse(resp['payload'].string)
  puts "current_shadow:"
  puts current_shadow

  now = Time.new
  if (now.hour == 0 && current_shadow['state']['desired']['set_temperature'] != 55 &&
      current_shadow['state']['desired']['temperature_range'] != 'low' &&
      current_shadow['state']['desired']['heating_mode'] != 'rest')
    puts "It is midnight, turning tub off"
    current_shadow['state']['desired']['set_temperature'] = 55
    current_shadow['state']['desired']['temperature_range'] = 'low'
    current_shadow['state']['desired']['heating_mode'] = 'rest'
    aws.update_thing_shadow({
      thing_name: thing_name,
      payload: current_shadow.to_json
    })
  end

  # Read saved shadow
  if !File.exists?(SAVED_SHADOW)
    previous_shadow = current_shadow
  else
    previous_shadow = JSON.parse(File.read(SAVED_SHADOW))
  end
  puts "previous_shadow:"
  puts previous_shadow

  previous_reported = previous_shadow['state']['reported']

  if current_shadow == nil
    puts "current shadow empty"
    r = aws.update_thing_shadow({
      thing_name: thing_name,
      payload: previous_shadow.to_json
    })
    return
  end

  current_desired = { "set_temperature" => current_shadow['state']['desired']['set_temperature'],
                      "temperature_range" => current_shadow['state']['desired']['temperature_range'],
                      "heating_mode" => current_shadow['state']['desired']['heating_mode']}

  current_reported = get_reported(spa, previous_reported)
  puts "current_reported:"
  puts current_reported

  new_shadow = { }

  if (current_reported['set_temperature'] != previous_reported['set_temperature']) ||
     (current_reported['temperature_range'] != previous_reported['temperature_range']) ||
     (current_reported['heating_mode'] != previous_reported['heating_mode'])
    # Someone changed the spa state, possibly by the front panel, update desired state
    # to match
    new_desired = { "set_temperature" => current_reported['set_temperature'],
                     "temperature_range" => current_reported['temperature_range'],
                     "heating_mode" => current_reported['heating_mode']}
    new_shadow = { "state" => { "reported" => current_reported, "desired" => new_desired}}

    puts "controlled state overridden by external process, no changes to tub, new shadow:"
    puts new_shadow
    r = aws.update_thing_shadow({
      thing_name: thing_name,
      payload: new_shadow.to_json
    })

    File.open(SAVED_SHADOW,"w") do |f|
      f.write(new_shadow.to_json)
    end

  else

    if current_desired['temperature_range'] != current_reported['temperature_range']
      puts "change temperature range"
      spa.toggle_temperature_range()
      current_reported = get_reported(spa, previous_reported)
      if current_reported['temperature_range'] != current_desired['temperature_range']
        puts "temperature range did not change"
      end
    end

    if current_desired['set_temperature'] != current_reported['set_temperature']
      puts "change set_temperature"
      spa.set_temperature(current_desired['set_temperature'].to_i)
      current_reported = get_reported(spa, previous_reported)
      if current_reported['set_temperature'] != current_desired['set_temperature']
        puts "set temperature failed to change to desired value"
      end
    end

    if current_desired['heating_mode'] != current_reported['heating_mode']
      puts "change heating mode"
      spa.toggle_heating_mode()
      current_reported = get_reported(spa, previous_reported)
      if current_reported['heating_mode'] != current_desired['heating_mode']
        puts "heating mode did not change"
      end
    end
    current_reported = get_reported(spa, previous_reported)
    puts "new reported:"
    puts current_reported

    # Only change the 'reported' part of the shadow in AWS.
    new_shadow = { "state" => { "reported" => current_reported}}
    puts "upadated spa reported state, new shadow to aws:"
    puts new_shadow
    r = aws.update_thing_shadow({
      thing_name: thing_name,
      payload: new_shadow.to_json
    })

    # Save 'reported' and 'desired' shadow locally.
    new_shadow = { "state" => { "reported" => current_reported, "desired" => current_desired}}
    puts "new saved shadow:"
    puts new_shadow
    File.open(SAVED_SHADOW,"w") do |f|
      f.write(new_shadow.to_json)
    end
  end
end

puts Time.now.inspect

spas = BWA::Discovery.discover
if spas.empty?
  $stderr.puts "Could not find spa!"
  exit 1
end
spa_ip = spas.first.first

spa = BWA::Client.new(spa_ip)

aws = Aws::IoTDataPlane::Client.new(
  region: 'us-west-2',
  endpoint: 'https://a3fqpqsy13jcnc.iot.us-west-2.amazonaws.com'
)

thing_name = "HotTub"

spa_control(spa, aws, thing_name)

