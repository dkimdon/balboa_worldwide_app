#!/usr/bin/env ruby

require 'aws-sdk-iotdataplane'
require 'bwa/client'
require 'bwa/discovery'
require 'json'

def update_spa_from_shadow(spa, aws, thing_name)
  resp = aws.get_thing_shadow({
    thing_name: thing_name
  })
  shadow = JSON.parse(resp['payload'].string)
  desired = shadow['state']['desired']

  if desired == nil
    return
  end

  message = spa.poll

  if (desired['temperature_range'] == "low" && message.temperature_range != :low) ||
     (desired['temperature_range'] == "high" && message.temperature_range != :high)
    puts "change temperature range"
    spa.toggle_temperature_range()
  end

  if desired['set_temperature'] != message.set_temperature
    puts "change set_temperature"
    spa.set_temperature(desired['set_temperature'].to_i)
  end

  if (desired['heating_mode'] == 'ready' && message.heating_mode != :ready) ||
     (desired['heating_mode'] == 'rest' && message.heating_mode != :rest)
    puts "change heating mode"
    spa.toggle_heating_mode()
  end
end

def update_spa_shadow(spa, aws, thing_name)
  message = spa.poll
  reported = {}
  reported['temperature'] = message.current_temperature.to_i

  if message.temperature_range == :low
    reported['temperature_range'] = "low"
  elsif message.temperature_range == :high
    reported['temperature_range'] = "high"
  end

  if message.heating_mode == :ready
    reported['heating_mode'] = "ready"
  elsif message.heating_mode == :rest
    reported['heating_mode'] = "rest"
  end

  reported['set_temperature'] = message.set_temperature.to_i

  shadow = { "state" => { "reported" => reported}}

  r = aws.update_thing_shadow({
    thing_name: thing_name,
    payload: shadow.to_json
  })

  puts reported
end

spas = BWA::Discovery.discover
if spas.empty?
  $stderr.puts "Could not find spa!"
  exit 1
end
spa_ip = spas.first.first

spa = BWA::Client.new(spa_ip)

aws = Aws::IoTDataPlane::Client.new(
  region: 'us-west-2',
  endpoint: 'https://a3fqpqsy13jcnc.iot.us-west-2.amazonaws.com'
)

thing_name = "HotTub"

update_spa_from_shadow(spa, aws, thing_name)
update_spa_shadow(spa, aws, thing_name)

